// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const { Markup } = require('telegraf');
const NodeCache = require('node-cache');
const moment = require('moment');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const cache = new NodeCache({ stdTTL: 86400 }); // —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 */
function initAdminCommands(bot) {

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  bot.command('dm', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É, —Ñ–æ—Ä–º–∞—Ç: /dm ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –¢–ï–ö–°–¢_–°–û–û–ë–©–ï–ù–ò–Ø
      const text = ctx.message.text;
      const match = text.match(/^\/dm\s+(\d+)\s+(.+)$/);
      
      if (!match) {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dm ID –¢–ï–ö–°–¢', Markup.inlineKeyboard([
          [Markup.button.callback('üíª –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_show_users')]
        ]));
        return;
      }
      
      const targetUserId = match[1];
      const messageText = match[2];
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∫—ç—à–∞
      let username = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const keys = cache.keys();
      const requestKeys = keys.filter(key => key.startsWith('request_'));
      
      for (const key of requestKeys) {
        const request = cache.get(key);
        if (request && request.userId == targetUserId) {
          username = request.username || username;
          break;
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        await bot.telegram.sendMessage(targetUserId, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n${messageText}`);
        await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} (ID: ${targetUserId})`, Markup.inlineKeyboard([
          [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥', `tg://user?id=${targetUserId}`)]          
        ]));

        console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
        await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /dm:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  });

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  bot.help(async (ctx) => {
    const adminChatId = process.env.ADMIN_CHAT_ID;
    const userId = ctx.from.id;
    const isAdmin = userId.toString() === adminChatId.toString();
    
    if (isAdmin) {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ctx.reply(adminHelpText);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      await ctx.reply('–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:', Markup.inlineKeyboard([
        [Markup.button.callback('üë§ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin_show_users')],
        [Markup.button.callback('üìù –ß–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã', 'admin_quick_commands')]
      ]));
      return;
    }
    
    // –û–±—ã—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await ctx.reply('–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n\n' +
                   '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
                   '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
                   '–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –≤ –º–µ–Ω—é.');
  });

  // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Å—Ç—ã–º –∫–æ–º–∞–Ω–¥–∞–º
  bot.action('admin_quick_commands', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.answerCbQuery('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        return;
      }
      
      await ctx.answerCbQuery();
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å—Ç—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
      await ctx.reply('–ß–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', Markup.inlineKeyboard([
        [Markup.button.callback('üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_show_users')],
        [Markup.button.callback('üì± –ü—Ä—è–º—ã–µ –¥–∏–∞–ª–æ–≥–∏', 'admin_direct_chats')],
        [Markup.button.callback('üíª –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', 'admin_system_status')]
      ]));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
  bot.action('admin_system_status', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.answerCbQuery('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        return;
      }
      
      await ctx.answerCbQuery();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –∫—ç—à–∞
      const keys = cache.keys();
      const requestKeys = keys.filter(key => key.startsWith('request_'));
      const userStateKeys = keys.filter(key => key.startsWith('user_'));
      const adminStateKeys = keys.filter(key => key.startsWith('admin_'));
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
      const allRequests = requestKeys.map(key => cache.get(key));
      const activeRequests = allRequests.filter(req => req.status === 'waiting' || req.status === 'new');
      const answeredRequests = allRequests.filter(req => req.status === 'answered');
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userIds = new Set();
      allRequests.forEach(req => req.userId && userIds.add(req.userId));
      
      const statusMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${allRequests.length}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${activeRequests.length}\n` +
        `‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${answeredRequests.length}\n` +
        `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.size}\n\n` +
        `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: ${getUptimeString()}\n` +
        `‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${process.env.NODE_ENV === 'production' ? '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π (webhook)' : '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (long-polling)'}\n`;
      
      await ctx.reply(statusMessage);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
  bot.action('admin_direct_chats', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.answerCbQuery('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        return;
      }
      
      await ctx.answerCbQuery();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –∫—ç—à–∞
      const keys = cache.keys();
      const requestKeys = keys.filter(key => key.startsWith('request_'));
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const users = new Map();
      requestKeys.forEach(key => {
        const request = cache.get(key);
        if (request && request.userId) {
          users.set(request.userId, {
            username: request.username,
            lastActivity: request.lastActivity || request.created,
            userId: request.userId
          });
        }
      });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const userList = Array.from(users.values())
        .sort((a, b) => (b.lastActivity || 0) - (a.lastActivity || 0));
      
      if (userList.length === 0) {
        await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const topUsers = userList.slice(0, 10);
      const buttons = [];
      
      topUsers.forEach(user => {
        buttons.push([
          Markup.button.url(`üì± ${user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: ${user.userId})`, `tg://user?id=${user.userId}`)
        ]);
      });
      
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:', Markup.inlineKeyboard(buttons));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä—è–º—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.');
    }
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
  function getUptimeString() {
    const uptime = process.uptime();
    const days = Math.floor(uptime / 86400);
    const hours = Math.floor((uptime % 86400) / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    
    let result = '';
    if (days > 0) result += `${days} –¥. `;
    if (hours > 0 || days > 0) result += `${hours} —á. `;
    if (minutes > 0 || hours > 0 || days > 0) result += `${minutes} –º–∏–Ω. `;
    result += `${seconds} —Å–µ–∫.`;
    
    return result;
  }

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.command('direct', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É, —Ñ–æ—Ä–º–∞—Ç: /direct ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      const text = ctx.message.text;
      const match = text.match(/^\/direct\s+(\d+)/);
      
      if (!match) {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /direct ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
        return;
      }
      
      const targetUserId = match[1];
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ)
      let username = '';
      const keys = cache.keys();
      const requestKeys = keys.filter(key => key.startsWith('request_'));
      
      for (const key of requestKeys) {
        const request = cache.get(key);
        if (request && request.userId == targetUserId) {
          username = request.username || '';
          break;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram
      const tgLink = `tg://user?id=${targetUserId}`;
      const webLink = username ? 
        `https://t.me/${username}` : 
        `https://t.me/user?id=${targetUserId}`;
      
      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const instructions = `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username ? username + ' ' : ''}(ID: ${targetUserId}), –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:

‚ÑπÔ∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:
‚Ä¢ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram
‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∞ –Ω–µ –±–æ—Ç–∞
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä—è–º–æ–º —á–∞—Ç–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –±–æ—Ç–∞`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      await ctx.reply(instructions, Markup.inlineKeyboard([
        [Markup.button.url(`üì± –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`, tgLink)],
        [Markup.button.url(`üåê –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ (web)`, webLink)]
      ]));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
      await ctx.reply('üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä—è–º–æ–º—É –æ–±—â–µ–Ω–∏—é:\n\n' +
      '‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ\n' +
      '‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ, —á—Ç–æ –í—ã –∫—É—Ä–∞—Ç–æ—Ä –∏ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏–∑ –±–æ—Ç–∞\n' +
      '‚Ä¢ –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /direct:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.command('users', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –∫—ç—à–∞
      const keys = cache.keys();
      const requestKeys = keys.filter(key => key.startsWith('request_'));
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const users = new Map();
      requestKeys.forEach(key => {
        const request = cache.get(key);
        if (request && request.userId) {
          users.set(request.userId, {
            username: request.username,
            lastActivity: request.lastActivity || request.created,
            userId: request.userId,
            category: request.category || 'unknown',
            lastMessage: request.text || ''
          });
        }
      });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const userList = Array.from(users.values())
        .sort((a, b) => (b.lastActivity || 0) - (a.lastActivity || 0))
        .slice(0, 10); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      
      if (userList.length === 0) {
        await ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let message = 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n';
      userList.forEach((user, index) => {
        const date = new Date(user.lastActivity || Date.now()).toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', hour: '2-digit', minute: '2-digit' });
        message += `${index + 1}. ${user.username} (ID: ${user.userId}) - ${date}\n`;
        message += `   üì± /direct ${user.userId} - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (user.lastMessage) {
          const shortMessage = user.lastMessage.length > 50 ? 
            user.lastMessage.substring(0, 50) + '...' : 
            user.lastMessage;
          message += `   üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: ${shortMessage}\n`;
        }
        
        message += '\n';
      });
      
      message += 'üì≤ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n' +
                 '/direct ID - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ Telegram\n' +
                 '/dm ID –¢–ï–ö–°–¢ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞';
      
      await ctx.reply(message);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const buttons = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const topUsers = userList.slice(0, 5);
      topUsers.forEach(user => {
        buttons.push([
          Markup.button.url(`üì± –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å ${user.username}`, `tg://user?id=${user.userId}`)
        ]);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
      buttons.push([Markup.button.callback('‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', 'admin_commands_help')]);
      
      await ctx.reply(
        '‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∏–∞–ª–æ–≥–∞–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:',
        Markup.inlineKeyboard(buttons)
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /users:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  bot.command('reset', async (ctx) => {
    try {
      const adminChatId = process.env.ADMIN_CHAT_ID;
      const userId = ctx.from.id;
      const isAdmin = userId.toString() === adminChatId.toString();
      
      if (!isAdmin) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      cache.set(`admin_${userId}_state`, null);
      cache.set(`admin_${userId}_current_request`, null);
      
      await ctx.reply('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.', 
        Markup.inlineKeyboard([
          [Markup.button.callback('üë§ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_show_users')]
        ])
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /reset:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.');
    }
  });
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminHelpText = `üîî –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞):\n\n` +
    `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
    `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
    `/direct ID - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ Telegram\n` +
    `/dm ID –¢–ï–ö–°–¢ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n` +
    `/users - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
    `/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n` +
    `üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n` +
    `–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –í—ã –º–æ–∂–µ—Ç–µ:\n` +
    `1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥" –¥–ª—è –ø—Ä—è–º–æ–≥–æ —á–∞—Ç–∞ –≤ Telegram\n` +
    `2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /direct ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä—è–º–æ–π —á–∞—Ç\n` +
    `3. –û—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /dm –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞"\n\n` +
    `‚ÑπÔ∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:\n` +
    `‚Ä¢ –ü—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n` +
    `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–∏–∞–ª–æ–≥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞\n` +
    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞", –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
  function addUserIdToMessage(message, userData) {
    return `${message}\n\nüîó –î–ª—è –ø—Ä—è–º–æ–≥–æ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n/direct ${userData.userId}\nüí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n/dm ${userData.userId} –í–∞—à –æ—Ç–≤–µ—Ç`;
  }
  
  return {
    adminHelpText,
    addUserIdToMessage
  };
}

module.exports = initAdminCommands;